plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'org.dddjava.jig-gradle-plugin' version '2020.6.2.1'
    id 'de.undercouch.download' version '4.0.1'
    id "com.arenagod.gradle.MybatisGenerator" version "1.3"
    id 'com.cosminpolifronie.gradle.plantuml' version '1.6.0'
}

group 'org.example'
version '1.0-SNAPSHOT'

description = 'mapping sample'

sourceCompatibility = '1.8'

//　MyBatisのMapper.xmlを、Mapper.javaと同じディレクトリに置く
sourceSets {
    main {
        resources.srcDirs = ["src/main/java", "src/main/resources"]
    }
}

repositories {
    jcenter()
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE")
    implementation("org.springframework.boot:spring-boot-starter-web")
    runtimeOnly("org.springframework.boot:spring-boot-starter-thymeleaf")

    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.flywaydb:flyway-core")

    implementation ("io.springfox:springfox-swagger2:2.9.2")
    runtimeOnly ("io.springfox:springfox-swagger-ui:2.9.2")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(group: 'org.junit.vintage')
    }

    runtimeOnly 'org.postgresql:postgresql:42.2.18'
    runtimeOnly 'mysql:mysql-connector-java:5.1.47'
}

test {
    useJUnitPlatform()
}

[compileJava, processResources]*.shouldRunAfter(clean)
jigReports.dependsOn(classes)

// SchemaSpy Task
configurations {
    // JDBC ドライバのためのコンフィギュレーション
    jdbc
}

dependencies {
    // JDBC ドライバのライブラリ
    jdbc(
            'org.postgresql:postgresql:42.2.6'
    )
}

tasks.register( 'schemaSpy', JavaExec ) {
    description = 'Generates database documents.'

    group = name

    ext.outputDir = file( "${buildDir}/${name}" )

    download {
        ext.schemaSpyFile = file( "${downloadTaskDir}/${name}/schemaspy.jar" )

        src( 'https://github.com/schemaspy/schemaspy/releases/download/v6.1.0/schemaspy-6.1.0.jar' )
        dest( schemaSpyFile )
        overwrite = false
    }

    File driverFile = configurations.jdbc.files.first()

    main = '-jar'
    args = [
            schemaSpyFile,
            '-t', 'pgsql',
            '-dp', driverFile,
            '-host', 'localhost',
            '-port', '5432',
            '-u', 'root',
            '-p', 'root',
            '-db', 'appdb',
            '-s', '商品',
            '-font', 'HeiseiKakuGo-W5',
            '-o', outputDir
    ]

    doFirst {
        outputDir.deleteDir()
    }

    doLast {
        copy{
            from "./build/schemaSpy/diagrams/summary"
            into "./build/erd"
            include "**/*.png"
        }
    }
}

// MyBatisGenerator
configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/autogen/generatorConfig.xml'

    // optional, here is the override dependencies for the plugin or you can add other database dependencies.
    dependencies {
        mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
        mybatisGenerator 'mysql:mysql-connector-java:5.1.47'
        mybatisGenerator 'org.postgresql:postgresql:42.2.6'
        mybatisGenerator  'com.h2database:h2:1.4.200'
    }
}

// DocumentGenerator
plantUml {
    render input: "docs/diagrams/*.puml", output: "docs/img/diagrams", format: 'png', withMetadata: false
}

task cleanBuildDocs(type: Delete) {
    delete "./build/jig"
    delete "./build/schemaSPY"
    delete "./build/erd"
}

task cleanImage(type: Delete) {
    delete "./docs/img"
}

task syncJigImage(type: Sync) {
    from "./build/jig"
    into "./docs/img/jig"
    include "**/*.svg"
}

task syncErdImage(type: Sync) {
    from "./build/erd"
    into "./docs/img/erd"
    include "**/*.png"
}

task syncImage(type: GradleBuild, dependsOn: ['syncJigImage', 'syncErdImage'])

task publishDocs (type: GradleBuild, dependsOn: ['cleanImage', 'schemaSpy', 'syncErdImage', 'jigReports', 'syncJigImage', 'plantUml'])
publishDocs.dependsOn cleanBuildDocs
